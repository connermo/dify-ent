diff --git a/api/configs/feature/__init__.py b/api/configs/feature/__init__.py
index 7638cd189..275de4919 100644
--- a/api/configs/feature/__init__.py
+++ b/api/configs/feature/__init__.py
@@ -56,6 +56,17 @@ class SecurityConfig(BaseSettings):
         default=None,
     )
 
+    # Message encryption configuration
+    MESSAGE_ENCRYPTION_ENABLED: bool = Field(
+        description="Enable or disable encryption for message queries and answers stored in database",
+        default=False,
+    )
+
+    ENCRYPTION_KEY_ID: Optional[str] = Field(
+        description="Encryption key ID for message encryption. If not provided, uses default key 'dify_default_2025'",
+        default=None,
+    )
+
 
 class AppExecutionConfig(BaseSettings):
     """
diff --git a/api/models/model.py b/api/models/model.py
index fbebdc817..508dac442 100644
--- a/api/models/model.py
+++ b/api/models/model.py
@@ -898,12 +898,12 @@ class Message(Base):
     override_model_configs = mapped_column(sa.Text)
     conversation_id = mapped_column(StringUUID, sa.ForeignKey("conversations.id"), nullable=False)
     _inputs: Mapped[dict] = mapped_column("inputs", sa.JSON)
-    query: Mapped[str] = mapped_column(sa.Text, nullable=False)
+    _query: Mapped[str] = mapped_column("query", sa.Text, nullable=False)
     message = mapped_column(sa.JSON, nullable=False)
     message_tokens: Mapped[int] = mapped_column(sa.Integer, nullable=False, server_default=sa.text("0"))
     message_unit_price = mapped_column(sa.Numeric(10, 4), nullable=False)
     message_price_unit = mapped_column(sa.Numeric(10, 7), nullable=False, server_default=sa.text("0.001"))
-    answer: Mapped[str] = mapped_column(sa.Text, nullable=False)
+    _answer: Mapped[str] = mapped_column("answer", sa.Text, nullable=False)
     answer_tokens: Mapped[int] = mapped_column(sa.Integer, nullable=False, server_default=sa.text("0"))
     answer_unit_price = mapped_column(sa.Numeric(10, 4), nullable=False)
     answer_price_unit = mapped_column(sa.Numeric(10, 7), nullable=False, server_default=sa.text("0.001"))
@@ -1223,6 +1223,71 @@ class Message(Base):
             workflow_run_id=data["workflow_run_id"],
         )
 
+    def _get_encryption_key_id(self):
+        """Get stable encryption key ID from config"""
+        if hasattr(self, '_cached_key_id'):
+            return self._cached_key_id
+
+        # Use fixed key ID from config instead of changeable tenant_id
+        from configs import dify_config
+        self._cached_key_id = dify_config.ENCRYPTION_KEY_ID or 'dify_default_2025'
+        return self._cached_key_id
+
+    def _is_encryption_enabled(self):
+        """Check if message encryption is enabled in config"""
+        from configs import dify_config
+        return dify_config.MESSAGE_ENCRYPTION_ENABLED
+
+    @property
+    def query(self):
+        """Transparently decrypt user query"""
+        if not self._query or not self._query.startswith("ENC:"):
+            return self._query or ""
+        try:
+            from core.helper import encrypter
+            key_id = self._get_encryption_key_id()
+            return encrypter.decrypt_token(key_id, self._query[4:]) if key_id else self._query
+        except Exception:
+            return self._query.replace("ENC:", "") if self._query else ""
+
+    @query.setter
+    def query(self, value):
+        """Transparently encrypt user query"""
+        if not self._is_encryption_enabled():
+            self._query = value or ""
+            return
+        try:
+            from core.helper import encrypter
+            key_id = self._get_encryption_key_id()
+            self._query = f"ENC:{encrypter.encrypt_token(key_id, value)}" if key_id and value else value or ""
+        except Exception:
+            self._query = value or ""
+
+    @property
+    def answer(self):
+        """Transparently decrypt AI answer"""
+        if not self._answer or not self._answer.startswith("ENC:"):
+            return self._answer or ""
+        try:
+            from core.helper import encrypter
+            key_id = self._get_encryption_key_id()
+            return encrypter.decrypt_token(key_id, self._answer[4:]) if key_id else self._answer
+        except Exception:
+            return self._answer.replace("ENC:", "") if self._answer else ""
+
+    @answer.setter
+    def answer(self, value):
+        """Transparently encrypt AI answer"""
+        if not self._is_encryption_enabled():
+            self._answer = value or ""
+            return
+        try:
+            from core.helper import encrypter
+            key_id = self._get_encryption_key_id()
+            self._answer = f"ENC:{encrypter.encrypt_token(key_id, value)}" if key_id and value else value or ""
+        except Exception:
+            self._answer = value or ""
+
 
 class MessageFeedback(Base):
     __tablename__ = "message_feedbacks"
