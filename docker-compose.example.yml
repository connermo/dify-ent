version: '3.8'

# ==================================================================
# Dify Enterprise SSO with Keycloak Integration
# This file shows how to use the Docker images built by GitHub Actions
# ==================================================================

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: dify-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: dify
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: difyai123456
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dify-redis
    restart: unless-stopped
    command: redis-server --requirepass difyai123456
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Dify API Service (Built by GitHub Actions)
  api:
    image: ghcr.io/${GITHUB_USERNAME}/dify-api:latest
    container_name: dify-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_USERNAME: postgres
      DB_PASSWORD: difyai123456
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: dify
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: difyai123456
      REDIS_DB: 0
      
      # Celery Configuration
      CELERY_BROKER_URL: redis://:difyai123456@redis:6379/1
      CELERY_BACKEND: redis
      
      # OAuth Configuration
      ENABLE_SOCIAL_OAUTH_LOGIN: "true"
      
      # Keycloak OAuth Settings
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      
      # Dify URLs (adjust ports as needed)
      CONSOLE_API_URL: ${CONSOLE_API_URL:-http://localhost:5001}
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-http://localhost:3000}
      SERVICE_API_URL: ${SERVICE_API_URL:-http://localhost:5001}
      APP_API_URL: ${APP_API_URL:-http://localhost:5001}
      APP_WEB_URL: ${APP_WEB_URL:-http://localhost:3000}
      
      # Other Configuration
      SECRET_KEY: ${SECRET_KEY:-change-me-dev-secret-key}
      INIT_PASSWORD: ${INIT_PASSWORD:-}
      DEPLOY_ENV: ${DEPLOY_ENV:-PRODUCTION}
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      PYTHONIOENCODING: utf-8
      LOG_LEVEL: INFO
      DEBUG: "false"
      FLASK_DEBUG: "false"
      
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dify Worker Service (Built by GitHub Actions)
  worker:
    image: ghcr.io/${GITHUB_USERNAME}/dify-worker:latest
    container_name: dify-worker
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_USERNAME: postgres
      DB_PASSWORD: difyai123456
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: dify
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: difyai123456
      REDIS_DB: 0
      
      # Celery Configuration
      CELERY_BROKER_URL: redis://:difyai123456@redis:6379/1
      CELERY_BACKEND: redis
      CELERY_WORKER_AMOUNT: 2
      
      # Other Configuration
      SECRET_KEY: ${SECRET_KEY:-change-me-dev-secret-key}
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      PYTHONIOENCODING: utf-8
      LOG_LEVEL: INFO
      
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

  # Dify Web Service (Built by GitHub Actions)
  web:
    image: ghcr.io/${GITHUB_USERNAME}/dify-web:latest
    container_name: dify-web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      # API Configuration
      CONSOLE_API_URL: ${CONSOLE_API_URL:-http://localhost:5001}
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-http://localhost:3000}
      SERVICE_API_URL: ${SERVICE_API_URL:-http://localhost:5001}
      APP_API_URL: ${APP_API_URL:-http://localhost:5001}
      APP_WEB_URL: ${APP_WEB_URL:-http://localhost:3000}
      
      # Other Configuration
      NODE_ENV: ${NODE_ENV:-production}
      
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak OIDC Server
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: dify-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KC_HOSTNAME: localhost
      KC_HTTP_PORT: 8080
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8280:8080"
    command: start-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak Database
  keycloak-db:
    image: postgres:15-alpine
    container_name: dify-keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: dify-nginx
    restart: unless-stopped
    depends_on:
      - api
      - web
      - keycloak
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  keycloak_data:
    driver: local

networks:
  default:
    name: dify-network
    driver: bridge
