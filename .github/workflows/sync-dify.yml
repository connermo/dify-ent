name: Sync Dify from Upstream and Build Images

on:
  workflow_dispatch:
    # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë
    inputs:
      force_sync:
        description: 'Force sync even if no updates'
        required: false
        default: false
        type: boolean
      full_multiarch:
        description: 'Build multi-arch images (linux/amd64, linux/arm64). If false, only build linux/amd64 for speed.'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-dify.yml'
      - 'dify-keycloak.diff'
      - 'docker-compose.yaml'

env:
  UPSTREAM_REPO: langgenius/dify
  UPSTREAM_BRANCH: main
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/dify
  DOCKER_PLATFORMS: linux/amd64,linux/arm64

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Set build platforms
        run: |
          if [ "${{ github.event.inputs.full_multiarch }}" = "true" ]; then
            echo "BUILD_PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV
          else
            echo "BUILD_PLATFORMS=linux/amd64" >> $GITHUB_ENV
          fi
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git fetch upstream --tags

      - name: Get latest upstream release tag
        id: latest-release
        uses: actions/github-script@v7
        with:
          script: |
            const rel = await github.rest.repos.getLatestRelease({ owner: 'langgenius', repo: 'dify' });
            core.setOutput('tag', rel.data.tag_name);

      - name: Export release tag to env
        run: |
          echo "UPSTREAM_RELEASE_TAG=${{ steps.latest-release.outputs.tag }}" >> $GITHUB_ENV

      - name: Check for updates (latest release)
        id: check-updates
        run: |
          echo "Latest upstream release: $UPSTREAM_RELEASE_TAG"
          if [ -f LAST_UPSTREAM_RELEASE ]; then
            PREV_TAG=$(cat LAST_UPSTREAM_RELEASE)
          else
            PREV_TAG=""
          fi
          if [ "$PREV_TAG" = "$UPSTREAM_RELEASE_TAG" ] && [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
            echo "updates=false" >> $GITHUB_OUTPUT
            echo "Already at latest upstream release $UPSTREAM_RELEASE_TAG"
          else
            echo "updates=true" >> $GITHUB_OUTPUT
            echo "Will update from '$PREV_TAG' to '$UPSTREAM_RELEASE_TAG'"
          fi

      - name: Prepare workspace
        if: steps.check-updates.outputs.updates == 'true'
        run: |
          # ‰øùÂ≠òÂΩìÂâçÁöÑË°•‰∏ÅÂíåÈÖçÁΩÆÊñá‰ª∂
          cp dify-keycloak.diff /tmp/ || true
          cp docker-compose.yaml /tmp/ || true
          cp -r keycloak/ /tmp/ || true

      - name: Apply Keycloak patch
        if: steps.check-updates.outputs.updates == 'true'
        run: |
          cd /tmp
          git clone https://github.com/${{ env.UPSTREAM_REPO }}.git upstream-dify
          cd upstream-dify
          git checkout tags/${{ env.UPSTREAM_RELEASE_TAG }} -b release-build
          
          # Â∫îÁî®Ë°•‰∏Å
          if git apply /tmp/dify-keycloak.diff; then
            echo "Patch applied successfully"
          else
            echo "Patch failed to apply, checking for conflicts..."
            git apply --check /tmp/dify-keycloak.diff || true
            echo "Patch application failed. Please review the changes manually."
            exit 1
          fi
          
          # Â§çÂà∂‰øÆÊîπÂêéÁöÑÊñá‰ª∂
          cp -r api/ /tmp/
          cp -r web/ /tmp/
          cd ..
          cp -r /tmp/upstream-dify/api/ ./
          cp -r /tmp/upstream-dify/web/ ./

      - name: Update docker-compose.yaml
        if: steps.check-updates.outputs.updates == 'true'
        run: |
          # Á°Æ‰øùdocker-compose.yamlÂåÖÂê´KeycloakÁõ∏ÂÖ≥ÁöÑÁéØÂ¢ÉÂèòÈáè
          if ! grep -q "KEYCLOAK_CLIENT_ID" docker-compose.yaml; then
            echo "Adding Keycloak environment variables to docker-compose.yaml..."
            # Âú®ÈÄÇÂΩì‰ΩçÁΩÆÊ∑ªÂä†KeycloakÁéØÂ¢ÉÂèòÈáè
            sed -i '/# OAuth2\/SSO Configuration/a\  KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-}\n  KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-}\n  KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL:-}' docker-compose.yaml
          fi

      - name: Setup Docker Buildx
        if: steps.check-updates.outputs.updates == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.BUILD_PLATFORMS }}

      - name: Login to Container Registry
        if: steps.check-updates.outputs.updates == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        if: steps.check-updates.outputs.updates == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./api
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.UPSTREAM_RELEASE_TAG }}
          provenance: false
          cache-from: |
            type=gha
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.UPSTREAM_RELEASE_TAG }}
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push Web image
        if: steps.check-updates.outputs.updates == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ env.UPSTREAM_RELEASE_TAG }}
          provenance: false
          cache-from: |
            type=gha
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ env.UPSTREAM_RELEASE_TAG }}
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push Worker image
        if: steps.check-updates.outputs.updates == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./api
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ env.UPSTREAM_RELEASE_TAG }}
          provenance: false
          cache-from: |
            type=gha
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ env.UPSTREAM_RELEASE_TAG }}
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SERVICE_TYPE=worker

      - name: Commit and push changes
        if: steps.check-updates.outputs.updates == 'true'
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Sync from upstream ${{ env.UPSTREAM_REPO }}@${{ env.UPSTREAM_BRANCH }}
            
            - Applied Keycloak OAuth integration patch
            - Updated docker-compose.yaml with Keycloak environment variables
            - Built and pushed Docker images with latest upstream changes
            
            Upstream commit: $(git rev-parse upstream/${{ env.UPSTREAM_BRANCH }})"
            git push origin main
          fi

      - name: Create Release
        if: steps.check-updates.outputs.updates == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.UPSTREAM_RELEASE_TAG }}
          release_name: Dify Enterprise SSO - ${{ env.UPSTREAM_RELEASE_TAG }}
          body: |
            ## üöÄ Dify Enterprise SSO Release
            
            This release includes:
            - Latest Dify updates from upstream repository
            - Keycloak OAuth integration patch applied
            - Updated docker-compose.yaml with Keycloak environment variables
            - Fresh Docker images built from latest upstream code
            
            ### üîó Docker Images
            
            - **API**: `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest`
            - **Web**: `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest`
            - **Worker**: `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest`
            
            ### üìã Changes
            
            - Synced from upstream: ${{ env.UPSTREAM_REPO }}@${{ env.UPSTREAM_BRANCH }}
            - Upstream commit: $(git rev-parse upstream/${{ env.UPSTREAM_BRANCH }})
            - Keycloak OAuth integration maintained
            - Environment variables updated
            
            ### üöÄ Quick Start
            
            ```bash
            # Pull the latest images
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
            ```
            
            ### üîß Multi-Platform Support
            
            Images are built for:
            - linux/amd64
            - linux/arm64
            
            ### üì¶ Docker Compose
            
            ```yaml
            version: '3.8'
            services:
              api:
                image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
                environment:
                  - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
                  - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
                  - KEYCLOAK_ISSUER_URL=${KEYCLOAK_ISSUER_URL}
                  - ENABLE_SOCIAL_OAUTH_LOGIN=true
              
              web:
                image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
              
              worker:
                image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
            ```
          draft: false
          prerelease: false

      - name: Update README with latest info
        if: steps.check-updates.outputs.updates == 'true'
        run: |
          # Êõ¥Êñ∞README‰∏≠ÁöÑÁâàÊú¨‰ø°ÊÅØ
          if grep -q "Last Updated:" README.md; then
            sed -i "s/Last Updated:.*/Last Updated: $(date +'%Y-%m-%d %H:%M UTC')/" README.md
          else
            echo "" >> README.md
            echo "## üìÖ Version Information" >> README.md
            echo "" >> README.md
            echo "**Last Updated**: $(date +'%Y-%m-%d %H:%M UTC')" >> README.md
          fi
          
          if grep -q "Upstream Version:" README.md; then
            sed -i "s/Upstream Version:.*/Upstream Version: $(git rev-parse upstream\/${{ env.UPSTREAM_BRANCH }})/" README.md
          else
            echo "**Upstream Version**: $(git rev-parse upstream/${{ env.UPSTREAM_BRANCH }})" >> README.md
          fi
          
          git add README.md
          if git diff --staged --quiet; then
            echo "No README changes to commit"
          else
            git commit -m "Update README with latest sync information"
            git push origin main
          fi

      - name: Comment on PR if exists
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîÑ Dify Sync Status
            
              **Status**: ${{ steps.check-updates.outputs.updates == 'true' && '‚úÖ Updated from upstream' || '‚úÖ Already up to date' }}
              
              **Last Check**: $(date -u +'%Y-%m-%d %H:%M UTC')
              
              **Upstream Repository**: ${{ env.UPSTREAM_REPO }}
              **Upstream Branch**: ${{ env.UPSTREAM_BRANCH }}
              
              ${{ steps.check-updates.outputs.updates == 'true' && '**Changes Applied**:\n- ‚úÖ Keycloak OAuth patch applied\n- ‚úÖ Docker images built and pushed\n- ‚úÖ docker-compose.yaml updated\n- ‚úÖ Release created' || '**No Updates**: Repository is already synchronized with upstream' }}`
            })

      - name: Summary
        run: |
          echo "## üéØ Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Upstream**: ${{ env.UPSTREAM_REPO }}@${{ env.UPSTREAM_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.check-updates.outputs.updates == 'true' && 'üîÑ Updated' || '‚úÖ Up to date' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-updates.outputs.updates }}" = "true" ]; then
            echo "### üì¶ Docker Images Built" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: \`${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Web**: \`${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Worker**: \`${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Changes Applied" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Keycloak OAuth integration patch" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Environment variables updated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Docker images rebuilt" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Release created" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üåê Multi-Platform Support" >> $GITHUB_STEP_SUMMARY
            echo "Images built for: \`${{ env.DOCKER_PLATFORMS }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ÑπÔ∏è No Updates Required" >> $GITHUB_STEP_SUMMARY
            echo "Repository is already synchronized with upstream." >> $GITHUB_STEP_SUMMARY
          fi
