diff --git a/api/configs/feature/__init__.py b/api/configs/feature/__init__.py
index 1234567..abcdefg 100644
--- a/api/configs/feature/__init__.py
+++ b/api/configs/feature/__init__.py
@@ -603,6 +603,18 @@ class FeatureConfig(BaseSettings):
         default=None,
     )
 
+    # Paraview SSO optional settings for console social login
+    PARAVIEW_CLIENT_ID: Optional[str] = Field(
+        description="Paraview SSO OAuth client ID",
+        default=None,
+    )
+    PARAVIEW_CLIENT_SECRET: Optional[str] = Field(
+        description="Paraview SSO OAuth client secret",
+        default=None,
+    )
+    PARAVIEW_SSO_URL: Optional[str] = Field(
+        description="Paraview SSO base URL, e.g. https://your-paraview-sso.com",
+        default=None,
+    )
+
     ACCESS_TOKEN_EXPIRE_MINUTES: PositiveInt = Field(
         description="Expiration time for access tokens in minutes",
         default=60,

diff --git a/api/libs/oauth.py b/api/libs/oauth.py
index 1234567..abcdefg 100644
--- a/api/libs/oauth.py
+++ b/api/libs/oauth.py
@@ -213,3 +213,61 @@ class KeycloakOAuth(OAuth):
         name = raw_info.get("name") or raw_info.get("preferred_username") or ""
         return OAuthUserInfo(id=str(raw_info.get("sub", "")), name=name, email=email)
 
+
+class ParaviewOAuth(OAuth):
+    """
+    OAuth2/OIDC client for Paraview SSO.
+    
+    sso_url should be like: https://your-paraview-sso.com
+    which yields standard endpoints under:
+      - {sso_url}/authorize
+      - {sso_url}/accessToken
+      - {sso_url}/profile
+    """
+
+    def __init__(self, client_id: str, client_secret: str, redirect_uri: str, sso_url: str):
+        super().__init__(client_id, client_secret, redirect_uri)
+        self.sso_url = sso_url.rstrip("/")
+        self._AUTH_URL = f"{self.sso_url}/authorize"
+        self._TOKEN_URL = f"{self.sso_url}/accessToken"
+        self._USER_INFO_URL = f"{self.sso_url}/profile"
+
+    def get_authorization_url(self, invite_token: str = None):
+        params = {
+            "client_id": self.client_id,
+            "response_type": "code",
+            "redirect_uri": self.redirect_uri,
+            "scope": "openid profile email",
+        }
+        
+        if invite_token:
+            params["state"] = invite_token
+        
+        return f"{self._AUTH_URL}?{urllib.parse.urlencode(params)}"
+
+    def get_access_token(self, code: str):
+        data = {
+            "client_id": self.client_id,
+            "client_secret": self.client_secret,
+            "code": code,
+            "grant_type": "authorization_code",
+            "redirect_uri": self.redirect_uri,
+        }
+        
+        headers = {"Accept": "application/json"}
+        response = requests.post(self._TOKEN_URL, data=data, headers=headers)
+        response.raise_for_status()
+        response_json = response.json()
+        access_token = response_json.get("access_token")
+        if not access_token:
+            raise ValueError(f"Error in Paraview SSO OAuth: {response_json}")
+        return access_token
+
+    def get_raw_user_info(self, token: str):
+        headers = {"Authorization": f"Bearer {token}"}
+        response = requests.get(self._USER_INFO_URL, headers=headers)
+        response.raise_for_status()
+        return response.json()
+
+    def _transform_user_info(self, raw_info: dict) -> OAuthUserInfo:
+        # Paraview SSO user info mapping
+        email = raw_info.get("email") or ""
+        name = raw_info.get("name") or raw_info.get("display_name") or raw_info.get("username") or ""
+        user_id = raw_info.get("id") or raw_info.get("sub") or raw_info.get("user_id") or ""
+        return OAuthUserInfo(id=str(user_id), name=name, email=email)

diff --git a/api/controllers/console/auth/oauth.py b/api/controllers/console/auth/oauth.py
index 1234567..abcdefg 100644
--- a/api/controllers/console/auth/oauth.py
+++ b/api/controllers/console/auth/oauth.py
@@ -16,7 +16,7 @@ from extensions.ext_database import db
 from libs.datetime_utils import naive_utc_now
 from libs.helper import extract_remote_ip
-from libs.oauth import GitHubOAuth, GoogleOAuth, OAuthUserInfo, KeycloakOAuth
+from libs.oauth import GitHubOAuth, GoogleOAuth, OAuthUserInfo, KeycloakOAuth, ParaviewOAuth
 from models import Account
 from models.account import AccountStatus
 from services.account_service import AccountService, RegisterService, TenantService
@@ -61,7 +61,19 @@ def get_oauth_providers():
         else:
             keycloak_oauth = None
 
-        OAUTH_PROVIDERS = {"github": github_oauth, "google": google_oauth, "keycloak": keycloak_oauth}
+        # Paraview SSO settings are optional; present only when fully configured
+        if (
+            getattr(dify_config, "PARAVIEW_CLIENT_ID", None)
+            and getattr(dify_config, "PARAVIEW_CLIENT_SECRET", None)
+            and getattr(dify_config, "PARAVIEW_SSO_URL", None)
+        ):
+            paraview_oauth = ParaviewOAuth(
+                client_id=dify_config.PARAVIEW_CLIENT_ID,
+                client_secret=dify_config.PARAVIEW_CLIENT_SECRET,
+                redirect_uri=dify_config.CONSOLE_API_URL + "/console/api/oauth/authorize/paraview",
+                sso_url=dify_config.PARAVIEW_SSO_URL,
+            )
+        else:
+            paraview_oauth = None
+
+        OAUTH_PROVIDERS = {"github": github_oauth, "google": google_oauth, "keycloak": keycloak_oauth, "paraview": paraview_oauth}
         return OAUTH_PROVIDERS

diff --git a/docker/docker-compose.yaml b/docker/docker-compose.yaml
index 1234567..abcdefg 100644
--- a/docker/docker-compose.yaml
+++ b/docker/docker-compose.yaml
@@ -361,6 +361,10 @@ x-shared-env: &shared-api-worker-env
   KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-}
   KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-}
   KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL:-}
+  # Paraview SSO Settings
+  PARAVIEW_CLIENT_ID: ${PARAVIEW_CLIENT_ID:-}
+  PARAVIEW_CLIENT_SECRET: ${PARAVIEW_CLIENT_SECRET:-}
+  PARAVIEW_SSO_URL: ${PARAVIEW_SSO_URL:-}
   MAIL_TYPE: ${MAIL_TYPE:-resend}
   MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-}
   RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}

diff --git a/web/app/signin/components/social-auth.tsx b/web/app/signin/components/social-auth.tsx
index 1234567..abcdefg 100644
--- a/web/app/signin/components/social-auth.tsx
+++ b/web/app/signin/components/social-auth.tsx
@@ -14,11 +14,12 @@ type SocialAuthProps = {
 type OAuthProviders = {
   github: boolean
   google: boolean
   keycloak: boolean
+  paraview: boolean
 }

 export default function SocialAuth(props: SocialAuthProps) {
   const { t } = useTranslation()
   const searchParams = useSearchParams()
-  const [providers, setProviders] = useState<OAuthProviders>({ github: false, google: false, keycloak: false })
+  const [providers, setProviders] = useState<OAuthProviders>({ github: false, google: false, keycloak: false, paraview: false })

   useEffect(() => {
     // Fetch available OAuth providers from API
@@ -99,6 +100,21 @@ export default function SocialAuth(props: SocialAuthProps) {
         </a>
       </div>
     )}
+    {providers.paraview && (
+      <div className='w-full'>
+        <a href={getOAuthLink('/oauth/login/paraview')}>
+          <Button
+            disabled={props.disabled}
+            className='w-full'
+          >
+            <>
+              <span className="mr-2 h-5 w-5 flex items-center justify-center bg-blue-600 text-white text-xs font-bold rounded">
+                SSO
+              </span>
+              <span className="truncate leading-normal">{t('login.withSSO')}</span>
+            </>
+          </Button>
+        </a>
+      </div>
+    )}
   </>
 }