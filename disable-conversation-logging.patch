diff --git a/api/models/model.py b/api/models/model.py
index 1234567..8901234 100644
--- a/api/models/model.py
+++ b/api/models/model.py
@@ -336,6 +336,7 @@ class AppModelConfig(Base):
     dataset_configs = db.Column(db.Text)
     external_data_tools = db.Column(db.Text)
     file_upload = db.Column(db.Text)
+    disable_conversation_logging = db.Column(db.Boolean, nullable=False, server_default=db.text("false"))
 
     @property
     def app(self):
@@ -552,6 +553,7 @@ class AppModelConfig(Base):
             completion_prompt_config=self.completion_prompt_config,
             dataset_configs=self.dataset_configs,
             file_upload=self.file_upload,
+            disable_conversation_logging=self.disable_conversation_logging,
         )
 
         return new_app_model_config
@@ -0,0 +1,23 @@
+"""Add disable_conversation_logging to app_model_configs
+
+Revision ID: add_disable_conversation_logging
+Revises: # Will be filled in by Alembic
+Create Date: 2024-08-21 12:00:00.000000
+
+"""
+from alembic import op
+import sqlalchemy as sa
+
+# revision identifiers, used by Alembic.
+revision = 'add_disable_conversation_logging'
+down_revision = None  # This will be set to the latest revision
+branch_labels = None
+depends_on = None
+
+
+def upgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.add_column('app_model_configs', sa.Column('disable_conversation_logging', sa.Boolean(), nullable=False, server_default=sa.text('false')))
+    # ### end Alembic commands ###
+
+
+def downgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_column('app_model_configs', 'disable_conversation_logging')
+    # ### end Alembic commands ###
diff --git a/api/core/app/apps/message_based_app_generator.py b/api/core/app/apps/message_based_app_generator.py
index 1234567..8901234 100644
--- a/api/core/app/apps/message_based_app_generator.py
+++ b/api/core/app/apps/message_based_app_generator.py
@@ -120,6 +120,10 @@ class MessageBasedAppGenerator(BaseAppGenerator):
         """
         app_config: EasyUIBasedAppConfig = cast(EasyUIBasedAppConfig, application_generate_entity.app_config)
 
+        # Check if conversation logging is disabled
+        app_model_config = self._get_app_model_config(application_generate_entity.app_model)
+        disable_logging = getattr(app_model_config, 'disable_conversation_logging', False)
+
         # get from source
         end_user_id = None
         account_id = None
@@ -184,9 +188,16 @@ class MessageBasedAppGenerator(BaseAppGenerator):
                 from_account_id=account_id,
             )
 
-            db.session.add(conversation)
-            db.session.commit()
-            db.session.refresh(conversation)
+            if not disable_logging:
+                db.session.add(conversation)
+                db.session.commit()
+                db.session.refresh(conversation)
+            else:
+                # Generate a temporary ID for in-memory conversation
+                conversation.id = f"temp_{datetime.now(UTC).strftime('%Y%m%d%H%M%S%f')}"
+                conversation.created_at = datetime.now(UTC).replace(tzinfo=None)
+                conversation.updated_at = datetime.now(UTC).replace(tzinfo=None)
         else:
             conversation.updated_at = datetime.now(UTC).replace(tzinfo=None)
-            db.session.commit()
+            if not disable_logging:
+                db.session.commit()
 
         message = Message(
@@ -228,15 +239,25 @@ class MessageBasedAppGenerator(BaseAppGenerator):
             from_account_id=account_id,
         )
 
-        db.session.add(message)
-        db.session.commit()
-        db.session.refresh(message)
+        if not disable_logging:
+            db.session.add(message)
+            db.session.commit()
+            db.session.refresh(message)
+        else:
+            # Generate a temporary ID for in-memory message
+            message.id = f"temp_msg_{datetime.now(UTC).strftime('%Y%m%d%H%M%S%f')}"
+            message.created_at = datetime.now(UTC).replace(tzinfo=None)
+            message.updated_at = datetime.now(UTC).replace(tzinfo=None)
 
-        for file in application_generate_entity.files:
-            message_file = MessageFile(
-                message_id=message.id,
-                type=file.type,
-                transfer_method=file.transfer_method,
-                belongs_to="user",
-                url=file.remote_url,
-                upload_file_id=file.related_id,
-                created_by_role=(CreatorUserRole.ACCOUNT if account_id else CreatorUserRole.END_USER),
-                created_by=account_id or end_user_id or "",
-            )
-            db.session.add(message_file)
-            db.session.commit()
+        if not disable_logging:
+            for file in application_generate_entity.files:
+                message_file = MessageFile(
+                    message_id=message.id,
+                    type=file.type,
+                    transfer_method=file.transfer_method,
+                    belongs_to="user",
+                    url=file.remote_url,
+                    upload_file_id=file.related_id,
+                    created_by_role=(CreatorUserRole.ACCOUNT if account_id else CreatorUserRole.END_USER),
+                    created_by=account_id or end_user_id or "",
+                )
+                db.session.add(message_file)
+                db.session.commit()
 
         return conversation, message
diff --git a/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py b/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
index 1234567..8901234 100644
--- a/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
+++ b/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
@@ -369,6 +369,25 @@ class EasyUIBasedGenerateTaskPipeline:
         llm_result = self._task_state.llm_result
         usage = llm_result.usage
 
+        # Check if logging is disabled for temporary messages
+        if self._message_id.startswith("temp_msg_"):
+            # For temporary messages, just update in-memory attributes
+            if hasattr(self, '_message_obj'):
+                message = self._message_obj
+                message.message = PromptMessageUtil.prompt_messages_to_prompt_for_saving(
+                    self._model_config.mode, self._task_state.llm_result.prompt_messages
+                )
+                message.message_tokens = usage.prompt_tokens
+                message.message_unit_price = usage.prompt_unit_price
+                message.message_price_unit = usage.prompt_price_unit
+                message.answer = (
+                    PromptTemplateParser.remove_template_variables(cast(str, llm_result.message.content).strip())
+                    if llm_result.message.content
+                    else ""
+                )
+                message.answer_tokens = usage.completion_tokens
+                message.answer_unit_price = usage.completion_unit_price
+                message.answer_price_unit = usage.completion_price_unit
+                message.provider_response_latency = time.perf_counter() - self._start_at
+                message.total_price = usage.total_price
+                message.currency = usage.currency
+                message.message_metadata = self._task_state.metadata.model_dump_json()
+                self._task_state.llm_result.usage.latency = message.provider_response_latency
+            return
+
         message_stmt = select(Message).where(Message.id == self._message_id)
         message = session.scalar(message_stmt)
         if not message:
diff --git a/api/controllers/console/app/conversation.py b/api/controllers/console/app/conversation.py
index 1234567..8901234 100644
--- a/api/controllers/console/app/conversation.py
+++ b/api/controllers/console/app/conversation.py
@@ -96,6 +96,31 @@ class CompletionConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=AppMode.COMPLETION)
+    def delete(self, app_model):
+        """Clear all completion conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class CompletionConversationDetailApi(Resource):
@@ -292,6 +317,33 @@ class ChatConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
+    def delete(self, app_model):
+        """Clear all chat conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all chat conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class ChatConversationDetailApi(Resource):
diff --git a/web/models/debug.ts b/web/models/debug.ts
index 1234567..8901234 100644
--- a/web/models/debug.ts
+++ b/web/models/debug.ts
@@ -125,6 +125,7 @@ export type AgentConfig = {
   strategy: AgentStrategy
   max_iteration: number
   tools: ToolItem[]
+  disable_conversation_logging?: boolean
 }
 // frontend use. Not the same as backend
 export type ModelConfig = {
diff --git a/web/app/components/app/configuration/config/agent/agent-setting/index.tsx b/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
index 1234567..8901234 100644
--- a/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
+++ b/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
@@ -8,8 +8,10 @@ import ItemPanel from './item-panel'
 import Button from '@/app/components/base/button'
 import { CuteRobot } from '@/app/components/base/icons/src/vender/solid/communication'
 import { Unblur } from '@/app/components/base/icons/src/vender/solid/education'
+import { RiDatabase3Line } from '@remixicon/react'
 import Slider from '@/app/components/base/slider'
+import Switch from '@/app/components/base/switch'
 import type { AgentConfig } from '@/models/debug'
 import { DEFAULT_AGENT_PROMPT, MAX_ITERATIONS_NUM } from '@/config'
 
@@ -130,6 +132,23 @@ const AgentSetting: FC<Props> = ({
             </div>
           </ItemPanel>
 
+          {/* Disable Conversation Logging */}
+          <ItemPanel
+            className='mb-4'
+            icon={
+              <RiDatabase3Line className='h-4 w-4 text-[#06AED4]' />
+            }
+            name={t('appDebug.agent.setting.disableConversationLogging.name')}
+            description={t('appDebug.agent.setting.disableConversationLogging.description')}
+          >
+            <Switch
+              defaultValue={tempPayload.disable_conversation_logging}
+              onChange={(value) => {
+                setTempPayload({
+                  ...tempPayload,
+                  disable_conversation_logging: value,
+                })
+              }}
+              size='md'
+            />
+          </ItemPanel>
+
           {!isFunctionCall && (
             <div className='rounded-xl bg-background-section-burn py-2 shadow-xs'>
               <div className='flex h-8 items-center px-4 text-sm font-semibold leading-6 text-text-secondary'>{t('tools.builtInPromptTitle')}</div>
diff --git a/web/app/components/app/log/filter.tsx b/web/app/components/app/log/filter.tsx
index 1234567..8901234 100644
--- a/web/app/components/app/log/filter.tsx
+++ b/web/app/components/app/log/filter.tsx
@@ -1,12 +1,19 @@
 'use client'
 import type { FC } from 'react'
-import React from 'react'
+import React, { useState } from 'react'
 import { useTranslation } from 'react-i18next'
 import useSWR from 'swr'
 import dayjs from 'dayjs'
-import { RiCalendarLine } from '@remixicon/react'
+import { RiCalendarLine, RiDeleteBin6Line } from '@remixicon/react'
 import quarterOfYear from 'dayjs/plugin/quarterOfYear'
 import type { QueryParam } from './index'
 import Chip from '@/app/components/base/chip'
 import Input from '@/app/components/base/input'
 import Sort from '@/app/components/base/sort'
+import Button from '@/app/components/base/button'
+import Confirm from '@/app/components/base/confirm'
 import { fetchAnnotationsCount } from '@/service/log'
+import { clearChatConversations, clearCompletionConversations } from '@/service/log'
+import { useContext } from 'use-context-selector'
+import { ToastContext } from '@/app/components/base/toast'
 dayjs.extend(quarterOfYear)
@@ -34,10 +41,35 @@ type IFilterProps = {
   appId: string
   queryParams: QueryParam
   setQueryParams: (v: QueryParam) => void
+  onRefresh?: () => void
 }
 
-const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams }: IFilterProps) => {
+const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams, onRefresh }: IFilterProps) => {
   const { data } = useSWR({ url: `/apps/${appId}/annotations/count` }, fetchAnnotationsCount)
   const { t } = useTranslation()
+  const { notify } = useContext(ToastContext)
+  const [showConfirm, setShowConfirm] = useState(false)
+  const [isClearing, setIsClearing] = useState(false)
+
+  const handleClearLogs = async () => {
+    setIsClearing(true)
+    try {
+      if (isChatMode) {
+        await clearChatConversations({ appId })
+      } else {
+        await clearCompletionConversations({ appId })
+      }
+      notify({ type: 'success', message: t('appLog.filter.clearSuccess') })
+      onRefresh?.()
+    } catch (error) {
+      notify({ type: 'error', message: t('appLog.filter.clearFailed') })
+    } finally {
+      setIsClearing(false)
+      setShowConfirm(false)
+    }
+  }
+
   if (!data)
     return null
   return (
@@ -95,6 +127,26 @@ const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryPar
           />
         </>
       )}
+      <div className='ml-auto'>
+        <Button
+          variant='secondary'
+          size='small'
+          onClick={() => setShowConfirm(true)}
+          className='!h-8'
+        >
+          <RiDeleteBin6Line className='mr-1 h-4 w-4' />
+          {t('appLog.filter.clearAll')}
+        </Button>
+      </div>
+      {showConfirm && (
+        <Confirm
+          title={t('appLog.filter.clearConfirm.title')}
+          content={t('appLog.filter.clearConfirm.content')}
+          isShow={showConfirm}
+          onConfirm={handleClearLogs}
+          onCancel={() => setShowConfirm(false)}
+          isLoading={isClearing}
+        />
+      )}
     </div>
   )
 }
diff --git a/web/app/components/app/log/index.tsx b/web/app/components/app/log/index.tsx
index 1234567..8901234 100644
--- a/web/app/components/app/log/index.tsx
+++ b/web/app/components/app/log/index.tsx
@@ -108,7 +108,12 @@ const Logs: FC<ILogsProps> = ({ appDetail }) => {
     <div className='flex h-full grow flex-col'>
       <p className='system-sm-regular shrink-0 text-text-tertiary'>{t('appLog.description')}</p>
       <div className='flex max-h-[calc(100%-16px)] flex-1 grow flex-col py-4'>
-        <Filter isChatMode={isChatMode} appId={appDetail.id} queryParams={queryParams} setQueryParams={setQueryParams} />
+        <Filter 
+          isChatMode={isChatMode} 
+          appId={appDetail.id} 
+          queryParams={queryParams} 
+          setQueryParams={setQueryParams}
+          onRefresh={isChatMode ? mutateChatList : mutateCompletionList}
+        />
         {total === undefined
           ? <Loading type='app' />
           : total > 0
diff --git a/web/service/log.ts b/web/service/log.ts
index 1234567..8901234 100644
--- a/web/service/log.ts
+++ b/web/service/log.ts
@@ -1,5 +1,5 @@
 import type { Fetcher } from 'swr'
-import { get, post } from './base'
+import { del, get, post } from './base'
 import type {
   AgentLogDetailRequest,
   AgentLogDetailResponse,
@@ -80,3 +80,11 @@ export const fetchAgentLogDetail = ({ appID, params }: { appID: string; params:
 export const fetchAgentLogDetail = ({ appID, params }: { appID: string; params: AgentLogDetailRequest }) => {
   return get<AgentLogDetailResponse>(`/apps/${appID}/agent/logs`, { params })
 }
+
+// Clear all chat conversations
+export const clearChatConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/console/api/apps/${appId}/chat-conversations`)
+}
+
+// Clear all completion conversations
+export const clearCompletionConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/console/api/apps/${appId}/completion-conversations`)
+}
diff --git a/web/i18n/en-US/app-debug.ts b/web/i18n/en-US/app-debug.ts
index 1234567..8901234 100644
--- a/web/i18n/en-US/app-debug.ts
+++ b/web/i18n/en-US/app-debug.ts
@@ -522,6 +522,10 @@ const translation = {
         name: 'Maximum Iterations',
         description: 'Limit the number of iterations an agent assistant can execute',
       },
+      disableConversationLogging: {
+        name: 'Disable Conversation Logging',
+        description: 'When enabled, conversations and messages will not be stored in the database, ensuring enhanced privacy',
+      },
     },
     buildInPrompt: 'Build-In Prompt',
     firstPrompt: 'First Prompt',
diff --git a/web/i18n/zh-Hans/app-debug.ts b/web/i18n/zh-Hans/app-debug.ts
index 1234567..8901234 100644
--- a/web/i18n/zh-Hans/app-debug.ts
+++ b/web/i18n/zh-Hans/app-debug.ts
@@ -514,6 +514,10 @@ const translation = {
         name: '最大迭代次数',
         description: '限制代理型助手执行迭代的次数',
       },
+      disableConversationLogging: {
+        name: '禁用对话日志记录',
+        description: '启用后，对话和消息将不会存储在数据库中，确保更好的隐私保护',
+      },
     },
     buildInPrompt: '内置提示词',
     firstPrompt: '第一次提示词',
diff --git a/web/i18n/en-US/app-log.ts b/web/i18n/en-US/app-log.ts
index 1234567..8901234 100644
--- a/web/i18n/en-US/app-log.ts
+++ b/web/i18n/en-US/app-log.ts
@@ -75,6 +75,12 @@ const translation = {
     sortBy: 'Sort by:',
     descending: 'descending',
     ascending: 'ascending',
+    clearAll: 'Clear All Logs',
+    clearSuccess: 'All logs have been cleared successfully',
+    clearFailed: 'Failed to clear logs',
+    clearConfirm: {
+      title: 'Clear All Logs',
+      content: 'Are you sure you want to clear all logs? This action cannot be undone.',
+    },
   },
   workflowTitle: 'Workflow Logs',
   workflowSubtitle: 'The log recorded the operation of Automate.',
diff --git a/web/i18n/zh-Hans/app-log.ts b/web/i18n/zh-Hans/app-log.ts
index 1234567..8901234 100644
--- a/web/i18n/zh-Hans/app-log.ts
+++ b/web/i18n/zh-Hans/app-log.ts
@@ -75,6 +75,12 @@ const translation = {
     sortBy: '排序：',
     descending: '降序',
     ascending: '升序',
+    clearAll: '清空所有日志',
+    clearSuccess: '所有日志已成功清空',
+    clearFailed: '清空日志失败',
+    clearConfirm: {
+      title: '清空所有日志',
+      content: '确定要清空所有日志吗？此操作不可撤销。',
+    },
   },
   workflowTitle: '日志',
   workflowSubtitle: '日志记录了应用的执行情况',