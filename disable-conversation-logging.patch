diff --git a/api/controllers/console/app/conversation.py b/api/controllers/console/app/conversation.py
index 6ddae6fad..443175ed0 100644
--- a/api/controllers/console/app/conversation.py
+++ b/api/controllers/console/app/conversation.py
@@ -23,7 +23,7 @@ from libs.datetime_utils import naive_utc_now
 from libs.helper import DatetimeString
 from libs.login import login_required
 from models import Conversation, EndUser, Message, MessageAnnotation
-from models.model import AppMode
+from models.model import AppMode, AppModelConfig
 
 
 class CompletionConversationApi(Resource):
@@ -47,6 +47,12 @@ class CompletionConversationApi(Resource):
         args = parser.parse_args()
 
         query = db.select(Conversation).where(Conversation.app_id == app_model.id, Conversation.mode == "completion")
+        
+        # Filter out conversations where logging is disabled
+        query = query.join(AppModelConfig, Conversation.app_model_config_id == AppModelConfig.id).where(
+            (AppModelConfig.disable_conversation_logging == False) | 
+            (AppModelConfig.disable_conversation_logging == None)
+        )
 
         if args["keyword"]:
             query = query.join(Message, Message.conversation_id == Conversation.id).where(
@@ -96,6 +102,37 @@ class CompletionConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=AppMode.COMPLETION)
+    def delete(self, app_model):
+        """Clear all completion conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class CompletionConversationDetailApi(Resource):
     @setup_required
@@ -172,6 +209,12 @@ class ChatConversationApi(Resource):
         )
 
         query = db.select(Conversation).where(Conversation.app_id == app_model.id)
+        
+        # Filter out conversations where logging is disabled
+        query = query.join(AppModelConfig, Conversation.app_model_config_id == AppModelConfig.id).where(
+            (AppModelConfig.disable_conversation_logging == False) | 
+            (AppModelConfig.disable_conversation_logging == None)
+        )
 
         if args["keyword"]:
             keyword_filter = f"%{args['keyword']}%"
@@ -261,6 +304,37 @@ class ChatConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
+    def delete(self, app_model):
+        """Clear all chat conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all chat conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class ChatConversationDetailApi(Resource):
     @setup_required
@@ -277,8 +351,8 @@ class ChatConversationDetailApi(Resource):
 
     @setup_required
     @login_required
-    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
     @account_initialization_required
+    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
     def delete(self, app_model, conversation_id):
         if not current_user.is_editor:
             raise Forbidden()
diff --git a/api/core/app/apps/message_based_app_generator.py b/api/core/app/apps/message_based_app_generator.py
index 11c979765..61cde1c6f 100644
--- a/api/core/app/apps/message_based_app_generator.py
+++ b/api/core/app/apps/message_based_app_generator.py
@@ -120,6 +120,28 @@ class MessageBasedAppGenerator(BaseAppGenerator):
         """
         app_config: EasyUIBasedAppConfig = cast(EasyUIBasedAppConfig, application_generate_entity.app_config)
 
+        # Check if conversation logging is disabled
+        disable_logging = False
+        try:
+            # Try to get app_model from the entity, fallback to app_config if not available
+            if hasattr(application_generate_entity, 'app_model') and application_generate_entity.app_model:
+                app_model_config = self._get_app_model_config(application_generate_entity.app_model)
+                disable_logging = getattr(app_model_config, 'disable_conversation_logging', False)
+            else:
+                # Fallback: get app_model_config from app_config
+                app_model_config_id = app_config.app_model_config_id
+                if app_model_config_id:
+                    app_model_config = (
+                    db.session.query(AppModelConfig)
+                    .where(AppModelConfig.id == app_model_config_id)
+                    .first()
+                )
+                    if app_model_config:
+                        disable_logging = getattr(app_model_config, 'disable_conversation_logging', False)
+        except Exception as e:
+            logger.warning("Failed to get app_model_config for disable_logging check: %s", e)
+            disable_logging = False
+
         # get from source
         end_user_id = None
         account_id = None
@@ -174,12 +196,21 @@ class MessageBasedAppGenerator(BaseAppGenerator):
                 from_account_id=account_id,
             )
 
-            db.session.add(conversation)
-            db.session.commit()
-            db.session.refresh(conversation)
+            if not disable_logging:
+                db.session.add(conversation)
+                db.session.commit()
+                db.session.refresh(conversation)
+            else:
+                # Generate a temporary ID for in-memory conversation
+                from datetime import datetime
+                from zoneinfo import ZoneInfo
+                conversation.id = f"temp_{datetime.now(ZoneInfo('UTC')).strftime('%Y%m%d%H%M%S%f')}"
+                conversation.created_at = naive_utc_now()
+                conversation.updated_at = naive_utc_now()
         else:
-            conversation.updated_at = naive_utc_now()
-            db.session.commit()
+            if not disable_logging:
+                conversation.updated_at = naive_utc_now()
+                db.session.commit()
 
         message = Message(
             app_id=app_config.app_id,
@@ -207,23 +238,32 @@ class MessageBasedAppGenerator(BaseAppGenerator):
             from_account_id=account_id,
         )
 
-        db.session.add(message)
-        db.session.commit()
-        db.session.refresh(message)
-
-        for file in application_generate_entity.files:
-            message_file = MessageFile(
-                message_id=message.id,
-                type=file.type,
-                transfer_method=file.transfer_method,
-                belongs_to="user",
-                url=file.remote_url,
-                upload_file_id=file.related_id,
-                created_by_role=(CreatorUserRole.ACCOUNT if account_id else CreatorUserRole.END_USER),
-                created_by=account_id or end_user_id or "",
-            )
-            db.session.add(message_file)
+        if not disable_logging:
+            db.session.add(message)
             db.session.commit()
+            db.session.refresh(message)
+        else:
+            # Generate a temporary ID for in-memory message
+            from datetime import datetime
+            from zoneinfo import ZoneInfo
+            message.id = f"temp_msg_{datetime.now(ZoneInfo('UTC')).strftime('%Y%m%d%H%M%S%f')}"
+            message.created_at = naive_utc_now()
+            message.updated_at = naive_utc_now()
+
+        if not disable_logging:
+            for file in application_generate_entity.files:
+                message_file = MessageFile(
+                    message_id=message.id,
+                    type=file.type,
+                    transfer_method=file.transfer_method,
+                    belongs_to="user",
+                    url=file.remote_url,
+                    upload_file_id=file.related_id,
+                    created_by_role=(CreatorUserRole.ACCOUNT if account_id else CreatorUserRole.END_USER),
+                    created_by=account_id or end_user_id or "",
+                )
+                db.session.add(message_file)
+                db.session.commit()
 
         return conversation, message
 
diff --git a/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py b/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
index 888434798..268b530b4 100644
--- a/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
+++ b/api/core/app/task_pipeline/easy_ui_based_generate_task_pipeline.py
@@ -57,7 +57,7 @@ from core.prompt.utils.prompt_message_util import PromptMessageUtil
 from core.prompt.utils.prompt_template_parser import PromptTemplateParser
 from events.message_event import message_was_created
 from extensions.ext_database import db
-from models.model import AppMode, Conversation, Message, MessageAgentThought
+from models.model import App, AppMode, AppModelConfig, Conversation, Message, MessageAgentThought
 
 logger = logging.getLogger(__name__)
 
@@ -369,6 +369,56 @@ class EasyUIBasedGenerateTaskPipeline(BasedGenerateTaskPipeline):
         llm_result = self._task_state.llm_result
         usage = llm_result.usage
 
+        # Check if conversation logging is disabled
+        # Get the current active app model config through the app's app_model_config_id
+        app_stmt = select(App).where(App.id == self._application_generate_entity.app_config.app_id)
+        app = session.scalar(app_stmt)
+        app_model_config = None
+        if app and app.app_model_config_id:
+            app_model_config_stmt = select(AppModelConfig).where(AppModelConfig.id == app.app_model_config_id)
+            app_model_config = session.scalar(app_model_config_stmt)
+        
+        disable_logging = (
+            getattr(app_model_config, 'disable_conversation_logging', False) 
+            if app_model_config else False
+        )
+
+
+
+        # Skip database operations if logging is disabled
+        if disable_logging:
+            # For in-memory temporary messages, just update task state without database persistence
+            self._task_state.llm_result.usage.latency = time.perf_counter() - self._start_at
+            
+            # Still send the event for other processing that might depend on it
+            # but create a temporary message object
+            temp_message = Message()
+            temp_message.id = self._message_id
+            temp_message.message = PromptMessageUtil.prompt_messages_to_prompt_for_saving(
+                self._model_config.mode, self._task_state.llm_result.prompt_messages
+            )
+            temp_message.message_tokens = usage.prompt_tokens
+            temp_message.message_unit_price = usage.prompt_unit_price
+            temp_message.message_price_unit = usage.prompt_price_unit
+            temp_message.answer = (
+                PromptTemplateParser.remove_template_variables(cast(str, llm_result.message.content).strip())
+                if llm_result.message.content
+                else ""
+            )
+            temp_message.answer_tokens = usage.completion_tokens
+            temp_message.answer_unit_price = usage.completion_unit_price
+            temp_message.answer_price_unit = usage.completion_price_unit
+            temp_message.provider_response_latency = time.perf_counter() - self._start_at
+            temp_message.total_price = usage.total_price
+            temp_message.currency = usage.currency
+            temp_message.message_metadata = self._task_state.metadata.model_dump_json()
+
+            message_was_created.send(
+                temp_message,
+                application_generate_entity=self._application_generate_entity,
+            )
+            return
+
         message_stmt = select(Message).where(Message.id == self._message_id)
         message = session.scalar(message_stmt)
         if not message:
diff --git a/api/migrations/versions/2025_08_25_1400-add_disable_conversation_logging.py b/api/migrations/versions/2025_08_25_1400-add_disable_conversation_logging.py
new file mode 100644
index 000000000..f4591639e
--- /dev/null
+++ b/api/migrations/versions/2025_08_25_1400-add_disable_conversation_logging.py
@@ -0,0 +1,27 @@
+"""add disable_conversation_logging to app_model_configs
+
+Revision ID: 2025_08_25_1400_add_disable_conversation_logging
+Revises: 532b3f888abf
+Create Date: 2025-08-25 14:00:00.000000
+
+"""
+from alembic import op
+import sqlalchemy as sa
+
+# revision identifiers, used by Alembic.
+revision = '2025_08_25_1400_add_disable_conversation_logging'
+down_revision = '532b3f888abf'
+branch_labels = None
+depends_on = None
+
+
+def upgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.add_column('app_model_configs', sa.Column('disable_conversation_logging', sa.Boolean(), nullable=False, server_default=sa.text('false')))
+    # ### end Alembic commands ###
+
+
+def downgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_column('app_model_configs', 'disable_conversation_logging')
+    # ### end Alembic commands ###
\ No newline at end of file
diff --git a/api/models/model.py b/api/models/model.py
index c4303f3cc..ea2983759 100644
--- a/api/models/model.py
+++ b/api/models/model.py
@@ -332,6 +332,7 @@ class AppModelConfig(Base):
     dataset_configs = mapped_column(sa.Text)
     external_data_tools = mapped_column(sa.Text)
     file_upload = mapped_column(sa.Text)
+    disable_conversation_logging = mapped_column(sa.Boolean, nullable=False, server_default=sa.text("false"))
 
     @property
     def app(self):
@@ -520,6 +521,7 @@ class AppModelConfig(Base):
             json.dumps(model_config.get("dataset_configs")) if model_config.get("dataset_configs") else None
         )
         self.file_upload = json.dumps(model_config.get("file_upload")) if model_config.get("file_upload") else None
+        self.disable_conversation_logging = model_config.get("disable_conversation_logging", False)
         return self
 
     def copy(self):
@@ -545,6 +547,7 @@ class AppModelConfig(Base):
             completion_prompt_config=self.completion_prompt_config,
             dataset_configs=self.dataset_configs,
             file_upload=self.file_upload,
+            disable_conversation_logging=self.disable_conversation_logging,
         )
 
         return new_app_model_config
diff --git a/web/app/(commonLayout)/app/(appDetailLayout)/[appId]/overview/cardView.tsx b/web/app/(commonLayout)/app/(appDetailLayout)/[appId]/overview/cardView.tsx
index 3d572b926..85198814a 100644
--- a/web/app/(commonLayout)/app/(appDetailLayout)/[appId]/overview/cardView.tsx
+++ b/web/app/(commonLayout)/app/(appDetailLayout)/[appId]/overview/cardView.tsx
@@ -6,6 +6,7 @@ import { useContext } from 'use-context-selector'
 import AppCard from '@/app/components/app/overview/appCard'
 import Loading from '@/app/components/base/loading'
 import MCPServiceCard from '@/app/components/tools/mcp/mcp-service-card'
+import DisableConversationLoggingCard from '@/app/components/app/overview/disable-conversation-logging-card'
 import { ToastContext } from '@/app/components/base/toast'
 import {
   fetchAppDetail,
@@ -125,6 +126,11 @@ const CardView: FC<ICardViewProps> = ({ appId, isInPanel, className }) => {
           appInfo={appDetail}
         />
       )}
+      {showMCPCard && (
+        <DisableConversationLoggingCard
+          appInfo={appDetail}
+        />
+      )}
     </div>
   )
 }
diff --git a/web/app/components/app/configuration/config/agent/agent-setting/index.tsx b/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
index 26a1242bd..7e5521fa4 100644
--- a/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
+++ b/web/app/components/app/configuration/config/agent/agent-setting/index.tsx
@@ -8,7 +8,9 @@ import ItemPanel from './item-panel'
 import Button from '@/app/components/base/button'
 import { CuteRobot } from '@/app/components/base/icons/src/vender/solid/communication'
 import { Unblur } from '@/app/components/base/icons/src/vender/solid/education'
+
 import Slider from '@/app/components/base/slider'
+import Switch from '@/app/components/base/switch'
 import type { AgentConfig } from '@/models/debug'
 import { DEFAULT_AGENT_PROMPT, MAX_ITERATIONS_NUM } from '@/config'
 
@@ -129,6 +131,8 @@ const AgentSetting: FC<Props> = ({
             </div>
           </ItemPanel>
 
+
+
           {!isFunctionCall && (
             <div className='rounded-xl bg-background-section-burn py-2 shadow-xs'>
               <div className='flex h-8 items-center px-4 text-sm font-semibold leading-6 text-text-secondary'>{t('tools.builtInPromptTitle')}</div>
diff --git a/web/app/components/app/log/filter.tsx b/web/app/components/app/log/filter.tsx
index 6e259a2f1..660581d79 100644
--- a/web/app/components/app/log/filter.tsx
+++ b/web/app/components/app/log/filter.tsx
@@ -1,16 +1,20 @@
 'use client'
 import type { FC } from 'react'
-import React from 'react'
+import React, { useState } from 'react'
 import { useTranslation } from 'react-i18next'
 import useSWR from 'swr'
 import dayjs from 'dayjs'
-import { RiCalendarLine } from '@remixicon/react'
+import { RiCalendarLine, RiDeleteBin6Line } from '@remixicon/react'
 import quarterOfYear from 'dayjs/plugin/quarterOfYear'
 import type { QueryParam } from './index'
 import Chip from '@/app/components/base/chip'
 import Input from '@/app/components/base/input'
 import Sort from '@/app/components/base/sort'
-import { fetchAnnotationsCount } from '@/service/log'
+import Button from '@/app/components/base/button'
+import Confirm from '@/app/components/base/confirm'
+import { fetchAnnotationsCount, clearChatConversations, clearCompletionConversations } from '@/service/log'
+import { useContext } from 'use-context-selector'
+import { ToastContext } from '@/app/components/base/toast'
 dayjs.extend(quarterOfYear)
 
 const today = dayjs()
@@ -32,15 +36,43 @@ type IFilterProps = {
   appId: string
   queryParams: QueryParam
   setQueryParams: (v: QueryParam) => void
+  onRefresh?: () => void
 }
 
-const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams }: IFilterProps) => {
+const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams, onRefresh }: IFilterProps) => {
   const { data } = useSWR({ url: `/apps/${appId}/annotations/count` }, fetchAnnotationsCount)
   const { t } = useTranslation()
+  const { notify } = useContext(ToastContext)
+  const [showConfirm, setShowConfirm] = useState(false)
+  const [isClearing, setIsClearing] = useState(false)
+
+  const handleClearLogs = async () => {
+    setIsClearing(true)
+    try {
+      console.log('Clearing logs for app:', appId, 'isChatMode:', isChatMode)
+      if (isChatMode) {
+        await clearChatConversations({ appId })
+      }
+      else {
+        await clearCompletionConversations({ appId })
+      }
+      notify({ type: 'success', message: t('appLog.filter.clearSuccess') })
+      onRefresh?.()
+    }
+    catch (error) {
+      console.error('Clear logs error:', error)
+      notify({ type: 'error', message: t('appLog.filter.clearFailed') })
+    }
+    finally {
+      setIsClearing(false)
+      setShowConfirm(false)
+    }
+  }
   if (!data)
     return null
   return (
-    <div className='mb-2 flex flex-row flex-wrap items-center gap-2'>
+    <div className='mb-2 flex flex-row flex-wrap items-center justify-between gap-2'>
+      <div className='flex flex-row flex-wrap items-center gap-2'>
       <Chip
         className='min-w-[150px]'
         panelClassName='w-[270px]'
@@ -94,6 +126,28 @@ const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryPara
           />
         </>
       )}
+      </div>
+      <div className='flex items-center'>
+        <Button
+          variant='secondary'
+          size='small'
+          onClick={() => setShowConfirm(true)}
+          className='!h-8'
+        >
+          <RiDeleteBin6Line className='mr-1 h-4 w-4' />
+          {t('appLog.filter.clearAll')}
+        </Button>
+      </div>
+      {showConfirm && (
+        <Confirm
+          title={t('appLog.filter.clearConfirm.title')}
+          content={t('appLog.filter.clearConfirm.content')}
+          isShow={showConfirm}
+          onConfirm={handleClearLogs}
+          onCancel={() => setShowConfirm(false)}
+          isLoading={isClearing}
+        />
+      )}
     </div>
   )
 }
diff --git a/web/app/components/app/log/index.tsx b/web/app/components/app/log/index.tsx
index 13be294be..d4d92b3b3 100644
--- a/web/app/components/app/log/index.tsx
+++ b/web/app/components/app/log/index.tsx
@@ -105,7 +105,13 @@ const Logs: FC<ILogsProps> = ({ appDetail }) => {
     <div className='flex h-full grow flex-col'>
       <p className='system-sm-regular shrink-0 text-text-tertiary'>{t('appLog.description')}</p>
       <div className='flex max-h-[calc(100%-16px)] flex-1 grow flex-col py-4'>
-        <Filter isChatMode={isChatMode} appId={appDetail.id} queryParams={queryParams} setQueryParams={setQueryParams} />
+        <Filter 
+          isChatMode={isChatMode} 
+          appId={appDetail.id} 
+          queryParams={queryParams} 
+          setQueryParams={setQueryParams}
+          onRefresh={isChatMode ? mutateChatList : mutateCompletionList}
+        />
         {total === undefined
           ? <Loading type='app' />
           : total > 0
diff --git a/web/app/components/app/overview/disable-conversation-logging-card.tsx b/web/app/components/app/overview/disable-conversation-logging-card.tsx
new file mode 100644
index 000000000..f3594df85
--- /dev/null
+++ b/web/app/components/app/overview/disable-conversation-logging-card.tsx
@@ -0,0 +1,119 @@
+'use client'
+import React, { useCallback, useEffect, useState } from 'react'
+import { useTranslation } from 'react-i18next'
+import { RiDatabaseLine } from '@remixicon/react'
+import Switch from '@/app/components/base/switch'
+import Indicator from '@/app/components/header/indicator'
+import type { AppDetailResponse } from '@/models/app'
+import { useAppContext } from '@/context/app-context'
+import { updateAppModelConfig } from '@/service/apps'
+import { useContext } from 'use-context-selector'
+import { ToastContext } from '@/app/components/base/toast'
+import cn from '@/utils/classnames'
+
+export type IDisableConversationLoggingCardProps = {
+  appInfo: AppDetailResponse
+}
+
+function DisableConversationLoggingCard({
+  appInfo,
+}: IDisableConversationLoggingCardProps) {
+  const { t } = useTranslation()
+  const { notify } = useContext(ToastContext)
+  const { isCurrentWorkspaceEditor } = useAppContext()
+  const [isDisabled, setIsDisabled] = useState(false)
+  const [isUpdating, setIsUpdating] = useState(false)
+
+  // 从应用配置中获取当前的禁止日志状态
+  useEffect(() => {
+    const modelConfig = appInfo.model_config
+    setIsDisabled(modelConfig?.disable_conversation_logging || false)
+  }, [appInfo.model_config])
+
+  const handleToggleLogging = useCallback(async (enabled: boolean) => {
+    if (!isCurrentWorkspaceEditor) return
+
+    console.log('Toggle logging called with enabled:', enabled)
+    console.log('App ID:', appInfo.id)
+    console.log('Current model config:', appInfo.model_config)
+
+    setIsUpdating(true)
+    try {
+      const modelConfig = {
+        ...appInfo.model_config,
+        disable_conversation_logging: enabled,
+      }
+
+      console.log('Sending model config:', modelConfig)
+      console.log('URL:', `/apps/${appInfo.id}/model-config`)
+
+      await updateAppModelConfig({
+        url: `/apps/${appInfo.id}/model-config`,
+        body: modelConfig,
+      })
+
+      setIsDisabled(enabled)
+      console.log('Successfully updated, new state:', enabled)
+      notify({
+        type: 'success',
+        message: t('common.actionMsg.modifiedSuccessfully'),
+      })
+    }
+    catch (error) {
+      console.error('Failed to update conversation logging setting:', error)
+      notify({
+        type: 'error',
+        message: t('common.actionMsg.modifiedUnsuccessfully'),
+      })
+    }
+    finally {
+      setIsUpdating(false)
+    }
+  }, [appInfo.id, appInfo.model_config, isCurrentWorkspaceEditor, notify, t])
+
+  return (
+    <div className={cn('w-full max-w-full rounded-xl border-l-[0.5px] border-t border-effects-highlight')}>
+      <div className='rounded-xl bg-background-default'>
+        <div className='flex w-full flex-col items-start justify-center gap-3 self-stretch border-b-[0.5px] border-divider-subtle p-3'>
+          <div className='flex w-full items-center gap-3 self-stretch'>
+            <div className='flex grow items-center'>
+              <div className='mr-3 shrink-0 rounded-lg border-[0.5px] border-divider-subtle bg-util-colors-red-red-500 p-1 shadow-md'>
+                <RiDatabaseLine className='h-4 w-4 text-text-primary-on-surface' />
+              </div>
+              <div className="group w-full">
+                <div className="system-md-semibold min-w-0 overflow-hidden text-ellipsis break-normal text-text-secondary group-hover:text-text-primary">
+                  {t('appDebug.agent.setting.disableConversationLogging.name')}
+                </div>
+              </div>
+            </div>
+            <div className='flex items-center gap-1'>
+              <Indicator color={isDisabled ? 'green' : 'gray'} />
+              <div className={`${isDisabled ? 'text-text-success' : 'text-text-tertiary'} system-xs-semibold-uppercase`}>
+                {isDisabled
+                  ? t('appOverview.overview.status.enabled')
+                  : t('appOverview.overview.status.notEnabled')}
+              </div>
+            </div>
+            <Switch
+              defaultValue={isDisabled}
+              onChange={handleToggleLogging}
+              disabled={!isCurrentWorkspaceEditor || isUpdating}
+            />
+          </div>
+          <div className='flex flex-col items-start justify-center self-stretch'>
+            <div className="system-xs-medium pb-1 text-text-tertiary">
+              {t('appDebug.agent.setting.disableConversationLogging.description')}
+            </div>
+            <div className="inline-flex h-auto w-full items-start rounded-lg bg-components-input-bg-normal p-2">
+              <div className="text-xs leading-relaxed text-text-secondary">
+                {t('appDebug.agent.setting.disableConversationLogging.detailDescription')}
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  )
+}
+
+export default DisableConversationLoggingCard
diff --git a/web/i18n/en-US/app-debug.ts b/web/i18n/en-US/app-debug.ts
index 4f7687300..9ce3fd43b 100644
--- a/web/i18n/en-US/app-debug.ts
+++ b/web/i18n/en-US/app-debug.ts
@@ -530,6 +530,11 @@ const translation = {
         name: 'Maximum Iterations',
         description: 'Limit the number of iterations an agent assistant can execute',
       },
+      disableConversationLogging: {
+        name: 'Disable Conversation Logging',
+        description: 'When enabled, all conversations and messages will not be saved to the database for privacy protection and data security',
+        detailDescription: 'When this feature is enabled, all conversation content, message records, and related metadata between users and the application will not be stored in the database. This helps protect user privacy and data security, and is particularly suitable for scenarios involving sensitive information. Please note that enabling this feature will prevent viewing historical conversation records.',
+      },
     },
     buildInPrompt: 'Build-In Prompt',
     firstPrompt: 'First Prompt',
diff --git a/web/i18n/en-US/app-log.ts b/web/i18n/en-US/app-log.ts
index 0d1234050..5420c219e 100644
--- a/web/i18n/en-US/app-log.ts
+++ b/web/i18n/en-US/app-log.ts
@@ -74,6 +74,13 @@ const translation = {
     sortBy: 'Sort by:',
     descending: 'descending',
     ascending: 'ascending',
+    clearAll: 'Clear All Logs',
+    clearSuccess: 'All logs have been cleared successfully',
+    clearFailed: 'Failed to clear logs',
+    clearConfirm: {
+      title: 'Clear All Logs',
+      content: 'Are you sure you want to clear all logs? This action cannot be undone.',
+    },
   },
   workflowTitle: 'Workflow Logs',
   workflowSubtitle: 'The log recorded the operation of Automate.',
diff --git a/web/i18n/en-US/app-overview.ts b/web/i18n/en-US/app-overview.ts
index feedc32e6..d255da732 100644
--- a/web/i18n/en-US/app-overview.ts
+++ b/web/i18n/en-US/app-overview.ts
@@ -124,6 +124,9 @@ const translation = {
     status: {
       running: 'In Service',
       disable: 'Disabled',
+      enabled: 'Enabled',
+      disabled: 'Disabled',
+      notEnabled: 'Not Enabled',
     },
   },
   analysis: {
diff --git a/web/i18n/zh-Hans/app-debug.ts b/web/i18n/zh-Hans/app-debug.ts
index 42e1e7269..ae923ffcd 100644
--- a/web/i18n/zh-Hans/app-debug.ts
+++ b/web/i18n/zh-Hans/app-debug.ts
@@ -524,6 +524,11 @@ const translation = {
         name: '最大迭代次数',
         description: '限制代理型助手执行迭代的次数',
       },
+      disableConversationLogging: {
+        name: '禁用对话日志记录',
+        description: '启用后，所有对话和消息将不会保存到数据库中，用于保护用户隐私及数据安全',
+        detailDescription: '启用此功能后，用户与应用的所有对话内容、消息记录、以及相关的元数据都不会存储到数据库中。这有助于保护用户隐私及数据安全，特别适用于处理敏感信息的场景。请注意，启用此功能后将无法查看历史对话记录。',
+      },
     },
     buildInPrompt: '内置提示词',
     firstPrompt: '第一次提示词',
diff --git a/web/i18n/zh-Hans/app-log.ts b/web/i18n/zh-Hans/app-log.ts
index 4c1815787..b74234b1d 100644
--- a/web/i18n/zh-Hans/app-log.ts
+++ b/web/i18n/zh-Hans/app-log.ts
@@ -74,6 +74,13 @@ const translation = {
     sortBy: '排序：',
     descending: '降序',
     ascending: '升序',
+    clearAll: '清空所有日志',
+    clearSuccess: '所有日志已成功清空',
+    clearFailed: '清空日志失败',
+    clearConfirm: {
+      title: '清空所有日志',
+      content: '确定要清空所有日志吗？此操作不可撤销。',
+    },
   },
   workflowTitle: '日志',
   workflowSubtitle: '日志记录了应用的执行情况',
diff --git a/web/i18n/zh-Hans/app-overview.ts b/web/i18n/zh-Hans/app-overview.ts
index a41a86975..485730189 100644
--- a/web/i18n/zh-Hans/app-overview.ts
+++ b/web/i18n/zh-Hans/app-overview.ts
@@ -124,6 +124,9 @@ const translation = {
     status: {
       running: '运行中',
       disable: '已停用',
+      enabled: '已启用',
+      disabled: '已禁用',
+      notEnabled: '未启用',
     },
   },
   analysis: {
diff --git a/web/service/log.ts b/web/service/log.ts
index 4bb4626b8..593439c4d 100644
--- a/web/service/log.ts
+++ b/web/service/log.ts
@@ -1,5 +1,5 @@
 import type { Fetcher } from 'swr'
-import { get, post } from './base'
+import { del, get, post } from './base'
 import type {
   AgentLogDetailRequest,
   AgentLogDetailResponse,
@@ -78,3 +78,13 @@ export const fetchTracingList: Fetcher<NodeTracingListResponse, { url: string }>
 export const fetchAgentLogDetail = ({ appID, params }: { appID: string; params: AgentLogDetailRequest }) => {
   return get<AgentLogDetailResponse>(`/apps/${appID}/agent/logs`, { params })
 }
+
+// Clear all chat conversations
+export const clearChatConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/chat-conversations`)
+}
+
+// Clear all completion conversations
+export const clearCompletionConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/completion-conversations`)
+}
diff --git a/web/types/app.ts b/web/types/app.ts
index 64c806e1d..3eb6a9733 100644
--- a/web/types/app.ts
+++ b/web/types/app.ts
@@ -245,6 +245,7 @@ export type ModelConfig = {
     strategy?: AgentStrategy
     tools: ToolItem[]
   }
+  disable_conversation_logging?: boolean
   model: Model
   dataset_configs: DatasetConfigs
   file_upload?: {
