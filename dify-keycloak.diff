diff --git a/api/configs/feature/__init__.py b/api/configs/feature/__init__.py
index 9f1646ea7..3d8a03e54 100644
--- a/api/configs/feature/__init__.py
+++ b/api/configs/feature/__init__.py
@@ -603,6 +603,20 @@ class AuthConfig(BaseSettings):
         default=None,
     )
 
+    # Keycloak (OIDC/OAuth2) optional settings for console social login
+    KEYCLOAK_CLIENT_ID: Optional[str] = Field(
+        description="Keycloak OAuth client ID",
+        default=None,
+    )
+    KEYCLOAK_CLIENT_SECRET: Optional[str] = Field(
+        description="Keycloak OAuth client secret",
+        default=None,
+    )
+    KEYCLOAK_ISSUER_URL: Optional[str] = Field(
+        description="Keycloak issuer url, e.g. http://localhost:8080/realms/dify",
+        default=None,
+    )
+
     ACCESS_TOKEN_EXPIRE_MINUTES: PositiveInt = Field(
         description="Expiration time for access tokens in minutes",
         default=60,
diff --git a/api/controllers/console/auth/oauth.py b/api/controllers/console/auth/oauth.py
index 4a6cb9939..8396c7398 100644
--- a/api/controllers/console/auth/oauth.py
+++ b/api/controllers/console/auth/oauth.py
@@ -14,7 +14,7 @@ from events.tenant_event import tenant_was_created
 from extensions.ext_database import db
 from libs.datetime_utils import naive_utc_now
 from libs.helper import extract_remote_ip
-from libs.oauth import GitHubOAuth, GoogleOAuth, OAuthUserInfo
+from libs.oauth import GitHubOAuth, GoogleOAuth, OAuthUserInfo, KeycloakOAuth
 from models import Account
 from models.account import AccountStatus
 from services.account_service import AccountService, RegisterService, TenantService
@@ -44,7 +44,22 @@ def get_oauth_providers():
                 redirect_uri=dify_config.CONSOLE_API_URL + "/console/api/oauth/authorize/google",
             )
 
-        OAUTH_PROVIDERS = {"github": github_oauth, "google": google_oauth}
+        # Keycloak settings are optional; present only when fully configured
+        if (
+            getattr(dify_config, "KEYCLOAK_CLIENT_ID", None)
+            and getattr(dify_config, "KEYCLOAK_CLIENT_SECRET", None)
+            and getattr(dify_config, "KEYCLOAK_ISSUER_URL", None)
+        ):
+            keycloak_oauth = KeycloakOAuth(
+                client_id=dify_config.KEYCLOAK_CLIENT_ID,
+                client_secret=dify_config.KEYCLOAK_CLIENT_SECRET,
+                redirect_uri=dify_config.CONSOLE_API_URL + "/console/api/oauth/authorize/keycloak",
+                issuer_url=dify_config.KEYCLOAK_ISSUER_URL,
+            )
+        else:
+            keycloak_oauth = None
+
+        OAUTH_PROVIDERS = {"github": github_oauth, "google": google_oauth, "keycloak": keycloak_oauth}
         return OAUTH_PROVIDERS
 
 
diff --git a/api/libs/oauth.py b/api/libs/oauth.py
index df75b5501..e0ea7e512 100644
--- a/api/libs/oauth.py
+++ b/api/libs/oauth.py
@@ -131,3 +131,63 @@ class GoogleOAuth(OAuth):
 
     def _transform_user_info(self, raw_info: dict) -> OAuthUserInfo:
         return OAuthUserInfo(id=str(raw_info["sub"]), name="", email=raw_info["email"])
+
+
+class KeycloakOAuth(OAuth):
+    """
+    Minimal OAuth2/OIDC client for Keycloak.
+
+    issuer_url should be like: http://localhost:8080/realms/dify
+    which yields standard endpoints under:
+      - {issuer_url}/protocol/openid-connect/auth
+      - {issuer_url}/protocol/openid-connect/token
+      - {issuer_url}/protocol/openid-connect/userinfo
+    """
+
+    def __init__(self, client_id: str, client_secret: str, redirect_uri: str, issuer_url: str):
+        super().__init__(client_id, client_secret, redirect_uri)
+        self.issuer_url = issuer_url.rstrip("/")
+        self._AUTH_URL = f"{self.issuer_url}/protocol/openid-connect/auth"
+        self._TOKEN_URL = f"{self.issuer_url}/protocol/openid-connect/token"
+        self._USER_INFO_URL = f"{self.issuer_url}/protocol/openid-connect/userinfo"
+
+    def get_authorization_url(self, invite_token: str = None):
+        params = {
+            "client_id": self.client_id,
+            "response_type": "code",
+            "redirect_uri": self.redirect_uri,
+            # request minimal scopes to retrieve email
+            "scope": "openid email profile",
+        }
+        if invite_token:
+            params["state"] = invite_token
+        return f"{self._AUTH_URL}?{urllib.parse.urlencode(params)}"
+
+    def get_access_token(self, code: str):
+        data = {
+            "client_id": self.client_id,
+            "client_secret": self.client_secret,
+            "code": code,
+            "grant_type": "authorization_code",
+            "redirect_uri": self.redirect_uri,
+        }
+        headers = {"Accept": "application/json"}
+        response = requests.post(self._TOKEN_URL, data=data, headers=headers)
+        response.raise_for_status()
+        response_json = response.json()
+        access_token = response_json.get("access_token")
+        if not access_token:
+            raise ValueError(f"Error in Keycloak OAuth: {response_json}")
+        return access_token
+
+    def get_raw_user_info(self, token: str):
+        headers = {"Authorization": f"Bearer {token}"}
+        response = requests.get(self._USER_INFO_URL, headers=headers)
+        response.raise_for_status()
+        return response.json()
+
+    def _transform_user_info(self, raw_info: dict) -> OAuthUserInfo:
+        # Keycloak OIDC userinfo contains 'sub' and may include 'email' and 'name'
+        email = raw_info.get("email") or ""
+        name = raw_info.get("name") or raw_info.get("preferred_username") or ""
+        return OAuthUserInfo(id=str(raw_info.get("sub", "")), name=name, email=email)
diff --git a/web/app/signin/components/social-auth.tsx b/web/app/signin/components/social-auth.tsx
index dc4322454..794d3dc3a 100644
--- a/web/app/signin/components/social-auth.tsx
+++ b/web/app/signin/components/social-auth.tsx
@@ -58,5 +58,22 @@ export default function SocialAuth(props: SocialAuthProps) {
         </Button>
       </a>
     </div>
+    <div className='w-full'>
+      <a href={getOAuthLink('/oauth/login/keycloak')}>
+        <Button
+          disabled={props.disabled}
+          className='w-full'
+        >
+          <>
+            <span className={
+              classNames(
+                'mr-2 h-5 w-5',
+              )
+            } />
+            <span className="truncate leading-normal">{t('login.withSSO')}</span>
+          </>
+        </Button>
+      </a>
+    </div>
   </>
 }
