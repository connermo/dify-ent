# Clear All Logs Feature for Dify
# 
# This patch adds a "Clear All Logs" feature to Dify applications.
# 
# Features:
# - Backend API endpoints to clear all chat and completion conversations
# - Frontend UI with confirmation dialog
# - Internationalization support (English and Chinese)
# - Proper permission checks (editor role required)
# - Complete cleanup of conversations, messages, and annotations
#
# Usage:
# 1. Apply this patch to your Dify installation
# 2. Restart the backend and frontend services
# 3. Go to any app's log page in the console
# 4. Click the "Clear All Logs" button to remove all conversation logs
#

diff --git a/api/controllers/console/app/conversation.py b/api/controllers/console/app/conversation.py
index 6ddae6fad..59604eeab 100644
--- a/api/controllers/console/app/conversation.py
+++ b/api/controllers/console/app/conversation.py
@@ -96,6 +96,37 @@ class CompletionConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=AppMode.COMPLETION)
+    def delete(self, app_model):
+        """Clear all completion conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class CompletionConversationDetailApi(Resource):
     @setup_required
@@ -261,6 +292,37 @@ class ChatConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
+    def delete(self, app_model):
+        """Clear all chat conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent-chat", "advanced-chat"])
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent-chat", "advanced-chat"])
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class ChatConversationDetailApi(Resource):
     @setup_required
diff --git a/web/app/components/app/log/filter.tsx b/web/app/components/app/log/filter.tsx
index 0c51e8ae9..c4b6d5d77 100644
--- a/web/app/components/app/log/filter.tsx
+++ b/web/app/components/app/log/filter.tsx
@@ -4,12 +4,14 @@ import cn from 'classnames'
 import dayjs from 'dayjs'
 import { useTranslation } from 'react-i18next'
 import { useRouter } from 'next/navigation'
-import { RiCalendarLine } from '@remixicon/react'
+import { RiCalendarLine, RiDeleteBin6Line } from '@remixicon/react'
 import Button from '@/app/components/base/button'
 import { DatePicker } from '@/app/components/base/date-picker'
 import { AppMode } from '@/types/app'
 import StatusNavigation from '@/app/components/app/log/status-navigation'
 import type { FilterState } from '@/app/components/app/log/filter'
+import { clearChatConversations, clearCompletionConversations } from '@/service/log'
+import { Toast } from '@/app/components/base/toast'
 
 const queryDateFormat = 'YYYY-MM-DD HH:mm'
 const defaultDisplayDateFormat = 'MMM D, YYYY'
@@ -20,10 +22,12 @@ export type Period = {
 type FilterProps = {
   appId: string
   appMode: AppMode
+  onRefresh?: () => void
 }
 
-const Filter: FC<FilterProps> = ({ appId, appMode }) => {
+const Filter: FC<FilterProps> = ({ appId, appMode, onRefresh }) => {
   const { t } = useTranslation()
+  const [showConfirm, setShowConfirm] = useState(false)
   const [period, setPeriod] = useState<Period>({ start: '', end: '' })
   const router = useRouter()
 
@@ -67,6 +71,35 @@ const Filter: FC<FilterProps> = ({ appId, appMode }) => {
     router.push(newUrl)
   }
 
+  const [isClearing, setIsClearing] = useState(false)
+
+  const handleClearLogs = async () => {
+    setIsClearing(true)
+    try {
+      if (appMode === AppMode.chat || appMode === AppMode.agent || appMode === AppMode.advancedChat) {
+        await clearChatConversations({ appId })
+      } else if (appMode === AppMode.completion) {
+        await clearCompletionConversations({ appId })
+      }
+      Toast.notify({
+        type: 'success',
+        message: t('appLog.filter.clearSuccess'),
+      })
+      if (onRefresh) {
+        onRefresh()
+      }
+    } catch (error) {
+      Toast.notify({
+        type: 'error',
+        message: t('appLog.filter.clearFailed'),
+      })
+    } finally {
+      setIsClearing(false)
+      setShowConfirm(false)
+    }
+  }
+
+  const Confirm = React.lazy(() => import('@/app/components/base/confirm'))
   return (
     <div className='flex flex-wrap items-center gap-2 text-gray-900'>
       <StatusNavigation appId={appId} />
@@ -88,6 +121,22 @@ const Filter: FC<FilterProps> = ({ appId, appMode }) => {
           <RiCalendarLine className='mr-1 h-4 w-4' />
           {t('appLog.filter.period')}
         </Button>
+        <Button
+          variant='destructive'
+          size='small'
+          onClick={() => setShowConfirm(true)}
+          className='!h-8'
+        >
+          <RiDeleteBin6Line className='mr-1 h-4 w-4' />
+          {t('appLog.filter.clearAll')}
+        </Button>
+      </div>
+      {showConfirm && (
+        <Confirm
+          title={t('appLog.filter.clearConfirm.title')}
+          content={t('appLog.filter.clearConfirm.content')}
+          isShow={showConfirm}
+          onConfirm={handleClearLogs}
+          onCancel={() => setShowConfirm(false)}
+          isLoading={isClearing}
+        />
       </div>
     </div>
   )
diff --git a/web/app/components/app/log/index.tsx b/web/app/components/app/log/index.tsx
index c8b1e41a3..ab6647b9a 100644
--- a/web/app/components/app/log/index.tsx
+++ b/web/app/components/app/log/index.tsx
@@ -55,6 +55,11 @@ const Log: FC<LogProps> = ({ appDetail }) => {
     setList(newList)
   }
 
+  const handleRefresh = () => {
+    setList([])
+    mutate()
+  }
+
   return (
     <div className='flex flex-col h-full'>
       <div className='flex items-center justify-between px-6 py-4 border-b border-gray-200'>
@@ -63,7 +68,7 @@ const Log: FC<LogProps> = ({ appDetail }) => {
         </div>
       </div>
       <div className='p-6 overflow-y-auto'>
-        <Filter appId={appDetail.id} appMode={appDetail.mode} />
+        <Filter appId={appDetail.id} appMode={appDetail.mode} onRefresh={handleRefresh} />
         <div className='mt-6'>
           {(!list || list.length === 0) ? (
             <div className='flex flex-col items-center justify-center h-32 text-gray-500'>
diff --git a/web/i18n/en-US/app-log.ts b/web/i18n/en-US/app-log.ts
index 06c25db98..e0c22e69e 100644
--- a/web/i18n/en-US/app-log.ts
+++ b/web/i18n/en-US/app-log.ts
@@ -8,6 +8,13 @@ const translation = {
   filter: {
     period: 'Period',
     annotation: 'Annotation',
+    clearAll: 'Clear All Logs',
+    clearSuccess: 'Logs cleared successfully',
+    clearFailed: 'Failed to clear logs',
+    clearConfirm: {
+      title: 'Clear All Logs',
+      content: 'Are you sure you want to clear all conversation logs? This action cannot be undone.',
+    },
   },
   table: {
     header: {
diff --git a/web/i18n/zh-Hans/app-log.ts b/web/i18n/zh-Hans/app-log.ts
index 7ef4e79ba..5b652eb0b 100644
--- a/web/i18n/zh-Hans/app-log.ts
+++ b/web/i18n/zh-Hans/app-log.ts
@@ -8,6 +8,13 @@ const translation = {
   filter: {
     period: '时间范围',
     annotation: '标注',
+    clearAll: '清空所有日志',
+    clearSuccess: '日志清空成功',
+    clearFailed: '清空日志失败',
+    clearConfirm: {
+      title: '清空所有日志',
+      content: '确定要清空所有对话日志吗？此操作无法撤销。',
+    },
   },
   table: {
     header: {
diff --git a/web/service/log.ts b/web/service/log.ts
index 39bb10b09..a6b52cf4b 100644
--- a/web/service/log.ts
+++ b/web/service/log.ts
@@ -1,4 +1,4 @@
-import { get, post } from '@/service/base'
+import { get, post, del } from '@/service/base'
 import type {
   ChatConversationsRequest,
   ChatConversationsResponse,
@@ -79,3 +79,11 @@ export const fetchAgentLogDetail = ({ appID, params }: { appID: string; params:
 export const updateLogAnnotationStatus = (appId: string, action: string, logId: string, annotationId: string) => {
   return post<AnnotationReply>(`/apps/${appId}/annotations/${action}/${logId}`, { body: { annotation_id: annotationId } })
 }
+
+// Clear all chat conversations
+export const clearChatConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/chat-conversations`)
+}
+
+// Clear all completion conversations
+export const clearCompletionConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/completion-conversations`)
+}