diff --git a/api/controllers/console/app/conversation.py b/api/controllers/console/app/conversation.py
index 6ddae6fad..59604eeab 100644
--- a/api/controllers/console/app/conversation.py
+++ b/api/controllers/console/app/conversation.py
@@ -96,6 +96,37 @@ class CompletionConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=AppMode.COMPLETION)
+    def delete(self, app_model):
+        """Clear all completion conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode == "completion"
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class CompletionConversationDetailApi(Resource):
     @setup_required
@@ -261,6 +292,37 @@ class ChatConversationApi(Resource):
 
         return conversations
 
+    @setup_required
+    @login_required
+    @account_initialization_required
+    @get_app_model(mode=[AppMode.CHAT, AppMode.AGENT_CHAT, AppMode.ADVANCED_CHAT])
+    def delete(self, app_model):
+        """Clear all chat conversations"""
+        if not current_user.is_editor:
+            raise Forbidden()
+            
+        # Delete all chat conversations and related data for this app
+        conversations = db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).all()
+        
+        for conversation in conversations:
+            # Delete messages first
+            db.session.query(Message).filter(Message.conversation_id == conversation.id).delete()
+            # Delete message annotations
+            db.session.query(MessageAnnotation).filter(MessageAnnotation.conversation_id == conversation.id).delete()
+            
+        # Delete conversations
+        db.session.query(Conversation).filter(
+            Conversation.app_id == app_model.id,
+            Conversation.mode.in_(["chat", "agent_chat", "advanced_chat"])
+        ).delete()
+        
+        db.session.commit()
+        
+        return {"result": "success"}
+
 
 class ChatConversationDetailApi(Resource):
     @setup_required
diff --git a/web/app/components/app/log/filter.tsx b/web/app/components/app/log/filter.tsx
index 6e259a2f1..df7fa6e71 100644
--- a/web/app/components/app/log/filter.tsx
+++ b/web/app/components/app/log/filter.tsx
@@ -4,13 +4,17 @@ import React from 'react'
 import { useTranslation } from 'react-i18next'
 import useSWR from 'swr'
 import dayjs from 'dayjs'
-import { RiCalendarLine } from '@remixicon/react'
+import { RiCalendarLine, RiDeleteBin6Line } from '@remixicon/react'
 import quarterOfYear from 'dayjs/plugin/quarterOfYear'
 import type { QueryParam } from './index'
 import Chip from '@/app/components/base/chip'
 import Input from '@/app/components/base/input'
 import Sort from '@/app/components/base/sort'
-import { fetchAnnotationsCount } from '@/service/log'
+import Button from '@/app/components/base/button'
+import Confirm from '@/app/components/base/confirm'
+import { clearChatConversations, clearCompletionConversations, fetchAnnotationsCount } from '@/service/log'
+import { useContext } from 'use-context-selector'
+import { ToastContext } from '@/app/components/base/toast'
 dayjs.extend(quarterOfYear)
 
 const today = dayjs()
@@ -32,11 +36,36 @@ type IFilterProps = {
   appId: string
   queryParams: QueryParam
   setQueryParams: (v: QueryParam) => void
+  onRefresh?: () => void
 }
 
-const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams }: IFilterProps) => {
+const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryParams, onRefresh }: IFilterProps) => {
   const { data } = useSWR({ url: `/apps/${appId}/annotations/count` }, fetchAnnotationsCount)
   const { t } = useTranslation()
+  const { notify } = useContext(ToastContext)
+  const [showConfirm, setShowConfirm] = React.useState(false)
+  const [isClearing, setIsClearing] = React.useState(false)
+
+  const handleClearLogs = async () => {
+    setIsClearing(true)
+    try {
+      if (isChatMode)
+        await clearChatConversations({ appId })
+       else
+        await clearCompletionConversations({ appId })
+
+      notify({ type: 'success', message: t('appLog.filter.clearSuccess') })
+      onRefresh?.()
+    }
+ catch (error) {
+      notify({ type: 'error', message: t('appLog.filter.clearFailed') })
+    }
+ finally {
+      setIsClearing(false)
+      setShowConfirm(false)
+    }
+  }
+
   if (!data)
     return null
   return (
@@ -94,6 +123,27 @@ const Filter: FC<IFilterProps> = ({ isChatMode, appId, queryParams, setQueryPara
           />
         </>
       )}
+      <div className='ml-auto'>
+        <Button
+          variant='secondary'
+          size='small'
+          onClick={() => setShowConfirm(true)}
+          className='!h-8'
+        >
+          <RiDeleteBin6Line className='mr-1 h-4 w-4' />
+          {t('appLog.filter.clearAll')}
+        </Button>
+      </div>
+      {showConfirm && (
+        <Confirm
+          title={t('appLog.filter.clearConfirm.title')}
+          content={t('appLog.filter.clearConfirm.content')}
+          isShow={showConfirm}
+          onConfirm={handleClearLogs}
+          onCancel={() => setShowConfirm(false)}
+          isLoading={isClearing}
+        />
+      )}
     </div>
   )
 }
diff --git a/web/app/components/app/log/index.tsx b/web/app/components/app/log/index.tsx
index 13be294be..10a05698d 100644
--- a/web/app/components/app/log/index.tsx
+++ b/web/app/components/app/log/index.tsx
@@ -105,7 +105,13 @@ const Logs: FC<ILogsProps> = ({ appDetail }) => {
     <div className='flex h-full grow flex-col'>
       <p className='system-sm-regular shrink-0 text-text-tertiary'>{t('appLog.description')}</p>
       <div className='flex max-h-[calc(100%-16px)] flex-1 grow flex-col py-4'>
-        <Filter isChatMode={isChatMode} appId={appDetail.id} queryParams={queryParams} setQueryParams={setQueryParams} />
+        <Filter
+          isChatMode={isChatMode}
+          appId={appDetail.id}
+          queryParams={queryParams}
+          setQueryParams={setQueryParams}
+          onRefresh={isChatMode ? mutateChatList : mutateCompletionList}
+        />
         {total === undefined
           ? <Loading type='app' />
           : total > 0
diff --git a/web/i18n/en-US/app-log.ts b/web/i18n/en-US/app-log.ts
index 0d1234050..5420c219e 100644
--- a/web/i18n/en-US/app-log.ts
+++ b/web/i18n/en-US/app-log.ts
@@ -74,6 +74,13 @@ const translation = {
     sortBy: 'Sort by:',
     descending: 'descending',
     ascending: 'ascending',
+    clearAll: 'Clear All Logs',
+    clearSuccess: 'All logs have been cleared successfully',
+    clearFailed: 'Failed to clear logs',
+    clearConfirm: {
+      title: 'Clear All Logs',
+      content: 'Are you sure you want to clear all logs? This action cannot be undone.',
+    },
   },
   workflowTitle: 'Workflow Logs',
   workflowSubtitle: 'The log recorded the operation of Automate.',
diff --git a/web/i18n/zh-Hans/app-log.ts b/web/i18n/zh-Hans/app-log.ts
index 4c1815787..b74234b1d 100644
--- a/web/i18n/zh-Hans/app-log.ts
+++ b/web/i18n/zh-Hans/app-log.ts
@@ -74,6 +74,13 @@ const translation = {
     sortBy: '排序：',
     descending: '降序',
     ascending: '升序',
+    clearAll: '清空所有日志',
+    clearSuccess: '所有日志已成功清空',
+    clearFailed: '清空日志失败',
+    clearConfirm: {
+      title: '清空所有日志',
+      content: '确定要清空所有日志吗？此操作不可撤销。',
+    },
   },
   workflowTitle: '日志',
   workflowSubtitle: '日志记录了应用的执行情况',
diff --git a/web/service/log.ts b/web/service/log.ts
index 4bb4626b8..593439c4d 100644
--- a/web/service/log.ts
+++ b/web/service/log.ts
@@ -1,5 +1,5 @@
 import type { Fetcher } from 'swr'
-import { get, post } from './base'
+import { del, get, post } from './base'
 import type {
   AgentLogDetailRequest,
   AgentLogDetailResponse,
@@ -78,3 +78,13 @@ export const fetchTracingList: Fetcher<NodeTracingListResponse, { url: string }>
 export const fetchAgentLogDetail = ({ appID, params }: { appID: string; params: AgentLogDetailRequest }) => {
   return get<AgentLogDetailResponse>(`/apps/${appID}/agent/logs`, { params })
 }
+
+// Clear all chat conversations
+export const clearChatConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/chat-conversations`)
+}
+
+// Clear all completion conversations
+export const clearCompletionConversations = ({ appId }: { appId: string }) => {
+  return del<any>(`/apps/${appId}/completion-conversations`)
+}
